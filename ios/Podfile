# Ensure CocoaPods runs with UTF-8 locale to avoid encoding errors in unicode_normalize
ENV['LANG'] = 'en_US.UTF-8'
ENV['LC_ALL'] = 'en_US.UTF-8'

# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip
pod 'react-native-razorpay', :path => '../node_modules/react-native-razorpay'

# Firebase/Notifee require newer iOS. Set explicit minimum.
platform :ios, '16.0'
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'unityapp' do
  # Ensure GoogleUtilities generates module maps for Swift interop
  pod 'GoogleUtilities', :modular_headers => true
  # Ensure Firebase modules expose module maps when building as static libs
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'FirebaseInstallations', :modular_headers => true
  pod 'FirebaseABTesting', '12.3.0', :modular_headers => true
  pod 'FirebaseInAppMessaging', '12.3.0-beta', :modular_headers => true
  pod 'FirebaseMessaging', '12.3.0', :modular_headers => true
  pod 'nanopb', :modular_headers => true
  # HyperKYC framework depends on Google's Material Components library
  pod 'MaterialComponents', '~> 124.2', :modular_headers => true
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )


  target 'unityappTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    # No custom tweaks required; react-native-unity venders UnityFramework itself

    # Ensure all pods adopt iOS 15.0+ (RNFB v23 iOS target)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
        # Allow non-modular includes within framework modules to avoid Clang module build issues
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'

        next unless target.name == 'react-native-unity'

        unity_headers = '$(PODS_TARGET_SRCROOT)/../../../unity/builds/ios/UnityFramework.framework/Headers'
        header_search_paths = config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
        unless header_search_paths.include?(unity_headers)
          config.build_settings['HEADER_SEARCH_PATHS'] = "#{header_search_paths} #{unity_headers}"
        end

        unity_framework_path = '$(PODS_TARGET_SRCROOT)/../../../unity/builds/ios'
        framework_search_paths = config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= '$(inherited)'
        unless framework_search_paths.include?(unity_framework_path)
          config.build_settings['FRAMEWORK_SEARCH_PATHS'] = "#{framework_search_paths} #{unity_framework_path}"
        end
      end
    end
  end
end
